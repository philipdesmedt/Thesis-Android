[% out.setContentType('Java'); %]

[% if (component.layoutcomponents.isDefined() and component.layoutcomponents.size() > 0) { %]
	[% for (c in component.layoutcomponents) { %]
		private [%= c.type %] [%= c %];
	[% } %]
[% } %]

private void setup[%= component %]() {
	[% if (component.layoutcomponents.isDefined() and component.layoutcomponents.size() > 0) { %]
		[% for (c in component.layoutcomponents) { %]
    	[%= c %] = ([%= c.type %]) findViewById(R.id.[%= c.layoutID %]);
    	[% } %]
	[% } %]

	// Acquire a reference to the system Location Manager
	LocationManager locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
	
	// Define a listener that responds to location updates
	LocationListener locationListener = new LocationListener() {

		@Override
		public void onLocationChanged(Location location) {
			// Called when a new location is found by the network location provider.
			[% if (component.callback.isDefined()) { %]
			[%= component.callback %](location);
			[% } %]
		}

		@Override
		public void onProviderDisabled(String provider) { 
		}

		@Override
		public void onProviderEnabled(String provider) {
		}

		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
		}
	};
	
	// Register the listener with the Location Manager to receive location updates
	locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);
	// the second is the minimum time interval between notifications
	// the third is the minimum change in distance between notifications
}

private void [%= component.callback %](Location loc) {
[% if (component.action.isDefined()) { %]
	[% if (component.action.isTypeOf(EditText)) { %]
		[%= component.action %].setText(loc.toString());
    	[%= component.action %].invalidate();
    [% } else { %]
    	lastLocation = loc;
    [% } %]
[% } %]

[% if (component.isTriggerOf.isDefined()) { %]
	// this component is the trigger of another component.
	// What does this mean for a geocomponent?
	// Check the type of isTriggerOf()
	// If it is "SMS", probably use Geo to send an SMS.

	this.sendSMS(editPhoneNr.getText().toString(), loc.toString());
[% } %]

[% if (component.trigger.isDefined()) { %]

[% } %]
}
